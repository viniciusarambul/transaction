// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/viniciusarambul/transaction/src/entity"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(account *entity.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), account)
}

// Find mocks base method.
func (m *MockAccountRepository) Find(id int) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAccountRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountRepository)(nil).Find), id)
}

// MockAccountPresenter is a mock of AccountPresenter interface.
type MockAccountPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPresenterMockRecorder
}

// MockAccountPresenterMockRecorder is the mock recorder for MockAccountPresenter.
type MockAccountPresenterMockRecorder struct {
	mock *MockAccountPresenter
}

// NewMockAccountPresenter creates a new mock instance.
func NewMockAccountPresenter(ctrl *gomock.Controller) *MockAccountPresenter {
	mock := &MockAccountPresenter{ctrl: ctrl}
	mock.recorder = &MockAccountPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPresenter) EXPECT() *MockAccountPresenterMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockAccountPresenter) Output(account entity.Account) entity.AccountOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", account)
	ret0, _ := ret[0].(entity.AccountOutput)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockAccountPresenterMockRecorder) Output(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockAccountPresenter)(nil).Output), account)
}

// MockAccountUseCase is a mock of AccountUseCase interface.
type MockAccountUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUseCaseMockRecorder
}

// MockAccountUseCaseMockRecorder is the mock recorder for MockAccountUseCase.
type MockAccountUseCaseMockRecorder struct {
	mock *MockAccountUseCase
}

// NewMockAccountUseCase creates a new mock instance.
func NewMockAccountUseCase(ctrl *gomock.Controller) *MockAccountUseCase {
	mock := &MockAccountUseCase{ctrl: ctrl}
	mock.recorder = &MockAccountUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountUseCase) EXPECT() *MockAccountUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountUseCase) Create(accountInput entity.AccountInput) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", accountInput)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountUseCaseMockRecorder) Create(accountInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountUseCase)(nil).Create), accountInput)
}

// Find mocks base method.
func (m *MockAccountUseCase) Find(id int) (entity.AccountOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(entity.AccountOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAccountUseCaseMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAccountUseCase)(nil).Find), id)
}

// MockAccountHandler is a mock of AccountHandler interface.
type MockAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAccountHandlerMockRecorder
}

// MockAccountHandlerMockRecorder is the mock recorder for MockAccountHandler.
type MockAccountHandlerMockRecorder struct {
	mock *MockAccountHandler
}

// NewMockAccountHandler creates a new mock instance.
func NewMockAccountHandler(ctrl *gomock.Controller) *MockAccountHandler {
	mock := &MockAccountHandler{ctrl: ctrl}
	mock.recorder = &MockAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountHandler) EXPECT() *MockAccountHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountHandler) Create(context *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", context)
}

// Create indicates an expected call of Create.
func (mr *MockAccountHandlerMockRecorder) Create(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountHandler)(nil).Create), context)
}
